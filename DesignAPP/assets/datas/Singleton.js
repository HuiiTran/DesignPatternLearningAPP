/* eslint-disable prettier/prettier */
import SingletonImage from '../images/Singleton/singleton.png'

export const Singleton_En = {
    Overview_1 : 'Singleton.',
    Overview_2 : 'Thuộc phân nhóm Creational patterns.',
    Overview_3 : 'Kiểm soát việc tạo lập đối tượng.',
    Overview_4 : 'Luôn luôn chỉ có 1 instance duy nhất cho Class. Instance này phải được truy xuất ở phạm vi Global.',
    Overview_5 : 'Luôn luôn sẵn sàng để được sử dụng.',
    Motivation_1: 'Cần duy nhất một instance của một class nào đó trong system.',
    Motivation_2: 'Cần truy cập, sử dụng instance này dễ dàng.',
    Motivation_3: 'window manager, Audio device, Printer spooler, những tài nguyên dùng chung (DB, file,...) chỉ cần dùng 1 instance mỗi lần được request.',
    Characteristics_1: 'Dữliệu thành viên instance (private và static) là đối tượng duy nhất của lớp Singleton.',
    Characteristics_2: 'Constructor của lớp Singleton được định nghĩa thành protected hoặc private.',
    Characteristics_3: 'Phương thức getInstance() dùng để khởi tạo đối tượng duy nhất, định nghĩa thành public và static. Client chỉ dùng getInstance() để tạo đối tượng cho lớp Singleton.',
    Consequences_1: 'Đảm bảo truy cập vào duy nhất một instance.',
    Consequences_2: 'Đối tượng singleton chỉ được khởi tạo duy nhất một lần khi nó được yêu cầu lần đầu.',
    Consequences_3: 'Linh hoạt hơn một class bình thường.',
    Consequences_4: 'Pattern này yêu cầu được đối xử đặc biệt trong môi trường multithreaded để nhiều threads không thể tạo một đối tượng singleton nhiều lần.',
    Consequences_5: 'Gây khó khăn trong kiểm thử',
    Reality_1: 'Eager initialization',
    Reality_2: 'Singleton Class được khởi tạo ngay khi được gọi đến.',
    Reality_3: 'Static block initialization',
    Reality_4: 'Static block cung cấp thêm lựa chọn cho việc handle exception hay các xử lý khác.',
    Reality_5: 'Lazy Initialization',
    Reality_6: 'Là một cách làm mang tính mở rộng hơn so với 2 cách làm trên và hoạt động tốt trong môi trường đơn luồng (single-thread).',
    Reality_7: 'Thread Safe Singleton',
    Reality_8: 'Phương thức synchronized của hàm getInstance()',
    Reality_9: 'Double Check Locking Singleton',
    Reality_10: 'Khai báo volatile cho instance để tránh lớp làm việc không chính xác do quá trình tối ưu hóa của trình biên dịch',
    Reality_11: 'Bill Pugh Singleton',
    Reality_12: 'Tạo ra static nested class với vai trò 1 Helper khi muốn tách biệt chức năng cho 1 class function rõ ràng hơn.',
    Image_1: SingletonImage,
}